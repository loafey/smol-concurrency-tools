searchState.loadedDescShard("smol_concurrency_tools", 0, "smol-concurrency-tools\nA Stream which runs infinitely and returns on a set …\nA Stream which contains a task which will be repeated …\nStream which repeats a set of tasks infinitely (i.e as …\nA builder struct for <code>Repeats</code>.\nAdd another function, which should construct a future.\nFinalize the building process.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new repeating task, with a function which should …\nCreates a new interval.\nCreates tasks that get re-created infinitely as long as …\nCreate a RepeatsBuilder.\nA clone of the popular <code>select!</code> macro, but made compatible …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")